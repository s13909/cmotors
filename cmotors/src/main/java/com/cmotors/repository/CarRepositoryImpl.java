package com.cmotors.repository;

import com.cmotors.app.Car;

import org.springframework.stereotype.Component;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

@Component
public class CarRepositoryImpl implements CarRepository {

    private Connection connection;

    private PreparedStatement addCarStmt;
    private PreparedStatement updateCarStmt;
    private PreparedStatement deleteCarStmt;
    private PreparedStatement getAllCarsStmt;
    private PreparedStatement getCarByIdStmt;
    private PreparedStatement dropTableStmt;

    public CarRepositoryImpl(Connection connection) throws SQLException {
        this.connection = connection;
        if (!isDatabaseReady()) {
            initDatabase();
        }
        setConnection(connection);
    }

    public CarRepositoryImpl() {
	}

	public boolean isDatabaseReady() {
        try {
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Car".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }
            return tableExists;
        } catch (SQLException e) {
            return false;
        }
    }

    @Override
    public int add(Car car) {
        int count = 0;
        try {
            addCarStmt.setString(1, car.getMake());
            addCarStmt.setString(2, car.getModel());
            count = addCarStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    @Override
    public int delete(Car car) {
        int count = 0;
        try {
            deleteCarStmt.setInt(1, car.getId());
            count = deleteCarStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    @Override
    public Car getById(int id) {
        Car car = new Car();
        try {
            getCarByIdStmt.setInt(1, id);
            ResultSet rs = getCarByIdStmt.executeQuery();

            while (rs.next()) {
                car.setId(rs.getInt("id"));
                car.setMake(rs.getString("make"));
                car.setModel(rs.getString("model"));
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return car;
    }

    @Override
    public List<Car> getAll() {
        List<Car> cars = new LinkedList<>();
        try {
            ResultSet rs = getAllCarsStmt.executeQuery();

            while (rs.next()) {
                Car car = new Car();
                car.setId(rs.getInt("id"));
                car.setMake(rs.getString("make"));
                car.setModel(rs.getString("model"));
                cars.add(car);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return cars;
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public void setConnection(Connection connection) throws SQLException {
        this.connection = connection;
        addCarStmt = connection.prepareStatement("INSERT INTO Car (make, model) VALUES (?, ?)");
        deleteCarStmt = connection.prepareStatement("DELETE FROM Car WHERE id = ?");
        getAllCarsStmt = connection.prepareStatement("SELECT id, make, model FROM Car");
        getCarByIdStmt = connection.prepareStatement("SELECT id, make, model FROM Car WHERE id = ?");
        updateCarStmt = connection.prepareStatement("UPDATE Car SET make = ?, model = ? WHERE id = ?");
        dropTableStmt = connection.prepareStatement("DROP TABLE Car");
    }

    @Override
    public void initDatabase() throws SQLException {
        connection.createStatement()
                .executeUpdate("CREATE TABLE " + "Car (id bigint GENERATED BY DEFAULT AS IDENTITY, "
                        + "make varchar(32) NOT NULL, " + " model varchar(32) NOT NULL)");
    }

    @Override
    public int update(int oldCarId, Car newCar) {
        int count = 0;
        try {
            updateCarStmt.setString(1, newCar.getMake());
            updateCarStmt.setString(2, newCar.getModel());
            updateCarStmt.setInt(3, oldCarId);
            count = updateCarStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    @Override
    public void dropRepository() {
        try {
            dropTableStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
    }

}